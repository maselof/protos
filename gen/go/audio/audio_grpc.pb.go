// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package audiov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioServiceClient is the client API for AudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioServiceClient interface {
	StreamAudio(ctx context.Context, in *AudioIDRequest, opts ...grpc.CallOption) (AudioService_StreamAudioClient, error)
	LikeAudio(ctx context.Context, in *AudioIDRequest, opts ...grpc.CallOption) (*AudioResponse, error)
	DownloadAudio(ctx context.Context, in *AudioIDRequest, opts ...grpc.CallOption) (AudioService_DownloadAudioClient, error)
	SearchAudio(ctx context.Context, in *AudioSearchNameRequest, opts ...grpc.CallOption) (*AudioListResponse, error)
	AddAudio(ctx context.Context, in *AudioRequest, opts ...grpc.CallOption) (*AudioResponse, error)
	UploadAudio(ctx context.Context, opts ...grpc.CallOption) (AudioService_UploadAudioClient, error)
}

type audioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioServiceClient(cc grpc.ClientConnInterface) AudioServiceClient {
	return &audioServiceClient{cc}
}

func (c *audioServiceClient) StreamAudio(ctx context.Context, in *AudioIDRequest, opts ...grpc.CallOption) (AudioService_StreamAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioService_ServiceDesc.Streams[0], "/music.AudioService/StreamAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioServiceStreamAudioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AudioService_StreamAudioClient interface {
	Recv() (*AudioStreamResponse, error)
	grpc.ClientStream
}

type audioServiceStreamAudioClient struct {
	grpc.ClientStream
}

func (x *audioServiceStreamAudioClient) Recv() (*AudioStreamResponse, error) {
	m := new(AudioStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *audioServiceClient) LikeAudio(ctx context.Context, in *AudioIDRequest, opts ...grpc.CallOption) (*AudioResponse, error) {
	out := new(AudioResponse)
	err := c.cc.Invoke(ctx, "/music.AudioService/LikeAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) DownloadAudio(ctx context.Context, in *AudioIDRequest, opts ...grpc.CallOption) (AudioService_DownloadAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioService_ServiceDesc.Streams[1], "/music.AudioService/DownloadAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioServiceDownloadAudioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AudioService_DownloadAudioClient interface {
	Recv() (*AudioStreamResponse, error)
	grpc.ClientStream
}

type audioServiceDownloadAudioClient struct {
	grpc.ClientStream
}

func (x *audioServiceDownloadAudioClient) Recv() (*AudioStreamResponse, error) {
	m := new(AudioStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *audioServiceClient) SearchAudio(ctx context.Context, in *AudioSearchNameRequest, opts ...grpc.CallOption) (*AudioListResponse, error) {
	out := new(AudioListResponse)
	err := c.cc.Invoke(ctx, "/music.AudioService/SearchAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) AddAudio(ctx context.Context, in *AudioRequest, opts ...grpc.CallOption) (*AudioResponse, error) {
	out := new(AudioResponse)
	err := c.cc.Invoke(ctx, "/music.AudioService/AddAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) UploadAudio(ctx context.Context, opts ...grpc.CallOption) (AudioService_UploadAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioService_ServiceDesc.Streams[2], "/music.AudioService/UploadAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioServiceUploadAudioClient{stream}
	return x, nil
}

type AudioService_UploadAudioClient interface {
	Send(*AudioRequest) error
	CloseAndRecv() (*AudioResponse, error)
	grpc.ClientStream
}

type audioServiceUploadAudioClient struct {
	grpc.ClientStream
}

func (x *audioServiceUploadAudioClient) Send(m *AudioRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioServiceUploadAudioClient) CloseAndRecv() (*AudioResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AudioResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioServiceServer is the server API for AudioService service.
// All implementations must embed UnimplementedAudioServiceServer
// for forward compatibility
type AudioServiceServer interface {
	StreamAudio(*AudioIDRequest, AudioService_StreamAudioServer) error
	LikeAudio(context.Context, *AudioIDRequest) (*AudioResponse, error)
	DownloadAudio(*AudioIDRequest, AudioService_DownloadAudioServer) error
	SearchAudio(context.Context, *AudioSearchNameRequest) (*AudioListResponse, error)
	AddAudio(context.Context, *AudioRequest) (*AudioResponse, error)
	UploadAudio(AudioService_UploadAudioServer) error
	mustEmbedUnimplementedAudioServiceServer()
}

// UnimplementedAudioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioServiceServer struct {
}

func (UnimplementedAudioServiceServer) StreamAudio(*AudioIDRequest, AudioService_StreamAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudio not implemented")
}
func (UnimplementedAudioServiceServer) LikeAudio(context.Context, *AudioIDRequest) (*AudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAudio not implemented")
}
func (UnimplementedAudioServiceServer) DownloadAudio(*AudioIDRequest, AudioService_DownloadAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadAudio not implemented")
}
func (UnimplementedAudioServiceServer) SearchAudio(context.Context, *AudioSearchNameRequest) (*AudioListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAudio not implemented")
}
func (UnimplementedAudioServiceServer) AddAudio(context.Context, *AudioRequest) (*AudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAudio not implemented")
}
func (UnimplementedAudioServiceServer) UploadAudio(AudioService_UploadAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAudio not implemented")
}
func (UnimplementedAudioServiceServer) mustEmbedUnimplementedAudioServiceServer() {}

// UnsafeAudioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioServiceServer will
// result in compilation errors.
type UnsafeAudioServiceServer interface {
	mustEmbedUnimplementedAudioServiceServer()
}

func RegisterAudioServiceServer(s grpc.ServiceRegistrar, srv AudioServiceServer) {
	s.RegisterService(&AudioService_ServiceDesc, srv)
}

func _AudioService_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AudioIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioServiceServer).StreamAudio(m, &audioServiceStreamAudioServer{stream})
}

type AudioService_StreamAudioServer interface {
	Send(*AudioStreamResponse) error
	grpc.ServerStream
}

type audioServiceStreamAudioServer struct {
	grpc.ServerStream
}

func (x *audioServiceStreamAudioServer) Send(m *AudioStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AudioService_LikeAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).LikeAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.AudioService/LikeAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).LikeAudio(ctx, req.(*AudioIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_DownloadAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AudioIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioServiceServer).DownloadAudio(m, &audioServiceDownloadAudioServer{stream})
}

type AudioService_DownloadAudioServer interface {
	Send(*AudioStreamResponse) error
	grpc.ServerStream
}

type audioServiceDownloadAudioServer struct {
	grpc.ServerStream
}

func (x *audioServiceDownloadAudioServer) Send(m *AudioStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AudioService_SearchAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioSearchNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).SearchAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.AudioService/SearchAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).SearchAudio(ctx, req.(*AudioSearchNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_AddAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).AddAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.AudioService/AddAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).AddAudio(ctx, req.(*AudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_UploadAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioServiceServer).UploadAudio(&audioServiceUploadAudioServer{stream})
}

type AudioService_UploadAudioServer interface {
	SendAndClose(*AudioResponse) error
	Recv() (*AudioRequest, error)
	grpc.ServerStream
}

type audioServiceUploadAudioServer struct {
	grpc.ServerStream
}

func (x *audioServiceUploadAudioServer) SendAndClose(m *AudioResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioServiceUploadAudioServer) Recv() (*AudioRequest, error) {
	m := new(AudioRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioService_ServiceDesc is the grpc.ServiceDesc for AudioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music.AudioService",
	HandlerType: (*AudioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeAudio",
			Handler:    _AudioService_LikeAudio_Handler,
		},
		{
			MethodName: "SearchAudio",
			Handler:    _AudioService_SearchAudio_Handler,
		},
		{
			MethodName: "AddAudio",
			Handler:    _AudioService_AddAudio_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _AudioService_StreamAudio_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadAudio",
			Handler:       _AudioService_DownloadAudio_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadAudio",
			Handler:       _AudioService_UploadAudio_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "audio/audio.proto",
}

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	RegisterUser(ctx context.Context, in *UserRegRequest, opts ...grpc.CallOption) (*UserResponse, error)
	LoginUser(ctx context.Context, in *UserLogRequest, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserLogRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) RegisterUser(ctx context.Context, in *UserRegRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/music.Users/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LoginUser(ctx context.Context, in *UserLogRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/music.Users/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *UserLogRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/music.Users/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	RegisterUser(context.Context, *UserRegRequest) (*UserResponse, error)
	LoginUser(context.Context, *UserLogRequest) (*UserResponse, error)
	DeleteUser(context.Context, *UserLogRequest) (*UserResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) RegisterUser(context.Context, *UserRegRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUsersServer) LoginUser(context.Context, *UserLogRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUsersServer) DeleteUser(context.Context, *UserLogRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.Users/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RegisterUser(ctx, req.(*UserRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.Users/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LoginUser(ctx, req.(*UserLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.Users/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*UserLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Users_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Users_LoginUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audio/audio.proto",
}
